apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'realm-android'
android {
    compileSdk 35
    defaultConfig {
        applicationId "org.ole.planet.myplanet"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 2264
        versionName "0.22.64"
        ndkVersion '21.3.6528147'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    configurations.configureEach {
        resolutionStrategy.force 'com.google.android.material:material:1.12.0'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        resources {
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0'
            ]
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    lintOptions {
        abortOnError false
    }

    namespace 'org.ole.planet.myplanet'

    buildFeatures {
        viewBinding = true
        buildConfig true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    def planetLearningUrl = project.findProperty('PLANET_LEARNING_URL') ?: ""
    def planetLearningPin = project.findProperty('PLANET_LEARNING_PIN') ?: ""
    def planetGuatemalaUrl = project.findProperty('PLANET_GUATEMALA_URL') ?: ""
    def planetGuatemalaPin = project.findProperty('PLANET_GUATEMALA_PIN') ?: ""
    def planetSanPabloUrl = project.findProperty('PLANET_SANPABLO_URL') ?: ""
    def planetSanPabloPin = project.findProperty('PLANET_SANPABLO_PIN') ?: ""
    def planetSanPabloCloneUrl = project.findProperty('PLANET_SANPABLO_CLONE_URL') ?: ""
    def planetSanPabloClonePin = project.findProperty('PLANET_SANPABLO_CLONE_PIN') ?: ""
    def planetEarthUrl = project.findProperty('PLANET_EARTH_URL') ?: ""
    def planetEarthPin = project.findProperty('PLANET_EARTH_PIN') ?: ""
    def planetSomaliaUrl = project.findProperty('PLANET_SOMALIA_URL') ?: ""
    def planetSomaliaPin = project.findProperty('PLANET_SOMALIA_PIN') ?: ""
    def planetViUrl = project.findProperty('PLANET_VI_URL') ?: ""
    def planetViPin = project.findProperty('PLANET_VI_PIN') ?: ""
    def planetXelaUrl = project.findProperty('PLANET_XELA_URL') ?: ""
    def planetXelaPin = project.findProperty('PLANET_XELA_PIN') ?: ""
    def planetUriurUrl = project.findProperty('PLANET_URIUR_URL') ?: ""
    def planetUriurPin = project.findProperty('PLANET_URIUR_PIN') ?: ""
    def planetUriurCloneUrl = project.findProperty('PLANET_URIUR_CLONE_URL') ?: ""
    def planetUriurClonePin = project.findProperty('PLANET_URIUR_CLONE_PIN') ?: ""
    def planetRuiruUrl = project.findProperty('PLANET_RUIRU_URL') ?: ""
    def planetRuiruPin = project.findProperty('PLANET_RUIRU_PIN') ?: ""
    def planetEmbakasiUrl = project.findProperty('PLANET_EMBAKASI_URL') ?: ""
    def planetEmbakasiPin = project.findProperty('PLANET_EMBAKASI_PIN') ?: ""
    def planetEmbakasiCloneUrl = project.findProperty('PLANET_EMBAKASI_CLONE_URL') ?: ""
    def planetEmbakasiClonePin = project.findProperty('PLANET_EMBAKASI_CLONE_PIN') ?: ""
    def planetCambridgeUrl = project.findProperty('PLANET_CAMBRIDGE_URL') ?: ""
    def planetCambridgePin = project.findProperty('PLANET_CAMBRIDGE_PIN') ?: ""
    //def planetEgdirbmacUrl = project.findProperty('PLANET_EGDIRBMAC_URL') ?: ""
    //def planetEgdirbmacPin = project.findProperty('PLANET_EGDIRBMAC_PIN') ?: ""

    buildTypes.each {
        it.buildConfigField 'String', 'PLANET_LEARNING_URL', "\"$planetLearningUrl\""
        it.buildConfigField 'String', 'PLANET_LEARNING_PIN', "\"${planetLearningPin}\""
        it.buildConfigField 'String', 'PLANET_GUATEMALA_URL', "\"${planetGuatemalaUrl}\""
        it.buildConfigField 'String', 'PLANET_GUATEMALA_PIN', "\"${planetGuatemalaPin}\""
        it.buildConfigField 'String', 'PLANET_SANPABLO_URL', "\"${planetSanPabloUrl}\""
        it.buildConfigField 'String', 'PLANET_SANPABLO_PIN', "\"${planetSanPabloPin}\""
        it.buildConfigField 'String', 'PLANET_SANPABLO_CLONE_URL', "\"${planetSanPabloCloneUrl}\""
        it.buildConfigField 'String', 'PLANET_SANPABLO_CLONE_PIN', "\"${planetSanPabloClonePin}\""
        it.buildConfigField 'String', 'PLANET_EARTH_URL', "\"${planetEarthUrl}\""
        it.buildConfigField 'String', 'PLANET_EARTH_PIN', "\"${planetEarthPin}\""
        it.buildConfigField 'String', 'PLANET_SOMALIA_URL', "\"${planetSomaliaUrl}\""
        it.buildConfigField 'String', 'PLANET_SOMALIA_PIN', "\"${planetSomaliaPin}\""
        it.buildConfigField 'String', 'PLANET_VI_URL', "\"${planetViUrl}\""
        it.buildConfigField 'String', 'PLANET_VI_PIN', "\"${planetViPin}\""
        it.buildConfigField 'String', 'PLANET_XELA_URL', "\"${planetXelaUrl}\""
        it.buildConfigField 'String', 'PLANET_XELA_PIN', "\"${planetXelaPin}\""
        it.buildConfigField 'String', 'PLANET_URIUR_URL', "\"${planetUriurUrl}\""
        it.buildConfigField 'String', 'PLANET_URIUR_PIN', "\"${planetUriurPin}\""
        it.buildConfigField 'String', 'PLANET_URIUR_CLONE_URL', "\"${planetUriurCloneUrl}\""
        it.buildConfigField 'String', 'PLANET_URIUR_CLONE_PIN', "\"${planetUriurClonePin}\""
        it.buildConfigField 'String', 'PLANET_RUIRU_URL', "\"${planetRuiruUrl}\""
        it.buildConfigField 'String', 'PLANET_RUIRU_PIN', "\"${planetRuiruPin}\""
        it.buildConfigField 'String', 'PLANET_EMBAKASI_URL', "\"${planetEmbakasiUrl}\""
        it.buildConfigField 'String', 'PLANET_EMBAKASI_PIN', "\"${planetEmbakasiPin}\""
        it.buildConfigField 'String', 'PLANET_EMBAKASI_CLONE_URL', "\"${planetEmbakasiCloneUrl}\""
        it.buildConfigField 'String', 'PLANET_EMBAKASI_CLONE_PIN', "\"${planetEmbakasiClonePin}\""
        it.buildConfigField 'String', 'PLANET_CAMBRIDGE_URL', "\"${planetCambridgeUrl}\""
        it.buildConfigField 'String', 'PLANET_CAMBRIDGE_PIN', "\"${planetCambridgePin}\""
        //it.buildConfigField 'String', 'PLANET_EGDIRBMAC_URL', "\"${planetEgdirbmacUrl}\""
        //it.buildConfigField 'String', 'PLANET_EGDIRBMAC_PIN', "\"${planetEgdirbmacPin}\""
    }
}

tasks.register('generateVersionsXml') {
    def versionName = android.defaultConfig.versionName
    doLast {
        def versionsXmlFile = file('src/main/res/values/versions.xml')
        versionsXmlFile.text = """<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_version">$versionName</string>
</resources>"""
    }
}
preBuild.dependsOn generateVersionsXml

tasks.named('generateVersionsXml').configure {
    notCompatibleWithConfigurationCache("not supported due to internal project references")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.google.com" }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.7'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.core:core-ktx:1.15.0"
    implementation "androidx.work:work-runtime:2.10.0"
    implementation "androidx.slidingpanelayout:slidingpanelayout:1.2.0"
    implementation 'androidx.preference:preference-ktx:1.2.1'

    implementation 'com.google.code.gson:gson:2.12.1'
    implementation 'com.google.android.material:material:1.12.0'

    implementation "com.github.VaibhavLakhera:Circular-Progress-View:0.1.2"
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.github.jeancsanchez:jcplayer:2.7.2'
    implementation 'com.github.clans:fab:1.6.4'
    implementation 'com.github.barteksc:pdfium-android:1.9.0'
    implementation 'com.applandeo:material-calendar-view:1.9.2'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
    implementation 'com.borax12.materialdaterangepicker:library:2.0'
    implementation 'com.nex3z:toggle-button-group:1.2.3'
    implementation 'com.caverock:androidsvg-aar:1.4'
    implementation('com.opencsv:opencsv:5.10') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'de.rtner:PBKDF2:1.1.4'
    implementation 'org.osmdroid:osmdroid-android:6.1.20'
    implementation 'org.jetbrains:annotations:26.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0"
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.29'

    implementation 'com.mikepenz:google-material-typeface:3.0.1.1.original@aar'
    implementation 'com.mikepenz:fontawesome-typeface:5.3.1.1@aar'
    implementation 'com.mikepenz:octicons-typeface:3.2.0.5@aar'
    implementation 'com.mikepenz:itemanimators:1.1.0@aar'
    implementation 'com.mikepenz:crossfader:1.6.0@aar'
    implementation 'com.mikepenz:crossfadedrawerlayout:1.1.0@aar'
    implementation('com.mikepenz:materialdrawer:6.1.1@aar') { transitive = true}

    def camera_version = "1.4.1"
    implementation "androidx.camera:camera-core:$camera_version"
    implementation "androidx.camera:camera-camera2:$camera_version"
    implementation "androidx.camera:camera-lifecycle:$camera_version"
    implementation "androidx.camera:camera-view:$camera_version"

    def dagger_hilt_version = "2.55"
    implementation "com.google.dagger:hilt-android:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_hilt_version"

    def retrofit2_version = "2.11.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"

    def glide_version = "4.16.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    def media3_version = "1.5.1"
    implementation "androidx.media3:media3-exoplayer:$media3_version"
    implementation "androidx.media3:media3-ui:$media3_version"
    implementation "androidx.media3:media3-common:$media3_version"

    def markwon_version = "4.6.2"
    implementation "io.noties.markwon:editor:$markwon_version"
    implementation "io.noties.markwon:image:$markwon_version"
    implementation "io.noties.markwon:html:$markwon_version"
    implementation "io.noties.markwon:ext-tables:$markwon_version"
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:2.1.10"))

    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
}
realm {
    syncEnabled = true
}
kapt{
    correctErrorTypes  true
}
